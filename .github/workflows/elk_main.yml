name: Deploy to Azure VM

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - '**/images/**'

  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up SSH key
      run: |
        echo "${{ secrets.AZURE_VM_SSH_KEY }}" > azure_vm_ssh_key
        chmod 600 azure_vm_ssh_key

    - name: Deploy to Azure VM
      env:
        AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
        AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }} 
        
      run: |
       
        # Conectar y crear la carpeta /elastic-stack si no existe
        ssh -o StrictHostKeyChecking=no -i azure_vm_ssh_key $AZURE_VM_USERNAME@$AZURE_VM_IP << 'EOF'
        
          DIR="elastic-stack/" 
          if [ ! -d "$DIR" ]; then
          sudo mkdir -p -m 777 elastic-stack/logstash/config/
          sudo mkdir -p -m 777 elastic-stack/logstash/pipeline/
          sudo chmod a+rwx elastic-stack
          sudo chmod a+rwx elastic-stack/logstash
          echo "Installing etc folder in ${DIR}..."
          fi
          #sudo mv -f mysql-connector-j-9.0.0.jar elastic-stack/logstash/config/
          #sudo mv -f pipelines.yml elastic-stack/logstash/config/
          #sudo mv -f kafka-to-elasticsearch.conf elastic-stack/logstash/pipeline/
          #sudo mv -f mysql-to-elasticsearch.conf elastic-stack/logstash/pipeline/
          #sudo mv -f elk-compose.yaml elastic-stack/
        EOF
        
        # Transferir el archivos a la VM
        scp -o StrictHostKeyChecking=no -i azure_vm_ssh_key -r logstash/config $AZURE_VM_USERNAME@$AZURE_VM_IP:elastic-stack/logstash
        scp -o StrictHostKeyChecking=no -i azure_vm_ssh_key -r logstash/pipeline $AZURE_VM_USERNAME@$AZURE_VM_IP:elastic-stack/logstash
        
        # Transferir el archivo elk-compose.yaml a la VM
        scp -o StrictHostKeyChecking=no -i azure_vm_ssh_key -r elk-compose.yaml $AZURE_VM_USERNAME@$AZURE_VM_IP:elastic-stack
                        
        # Conectar y ejecutar comandos en la VM
        ssh -o StrictHostKeyChecking=no -i azure_vm_ssh_key $AZURE_VM_USERNAME@$AZURE_VM_IP << 'EOF'

          # Crear un archivo .env con las variables de entorno
          cd elastic-stack
          echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}" > .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "ELASTIC_USERNAME=${{ secrets.ELASTIC_USERNAME }}" >> .env
          echo "ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}" >> .env
          echo "KAFKA_BOOTSTRAP_SERVERS=${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}" >> .env
          echo "KAFKA_USERNAME=${{ secrets.KAFKA_USERNAME }}" >> .env
          echo "KAFKA_PASSWORD=${{ secrets.KAFKA_PASSWORD }}" >> .env
          echo "ELASTICSEARCH_SERVICEACCOUNTTOKEN=${{ secrets.ELASTICSEARCH_SERVICEACCOUNTTOKEN }}" >> .env
          echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
          
          sudo chmod 777 logstash/config/pipelines.yml logstash/config/mysql-connector-j-9.0.0.jar .env

          # Levantar los servicios con Docker Compose
          docker compose -f elk-compose.yaml stop
          docker compose -f elk-compose.yaml up -d
        EOF
